
/** 
 * 将数值文本根据空白字符或逗号隔开,根据需要转换为整数或浮点数数组.
 *
 * @param text			需要被解析的文本
 * @param numberArray		用来接收解析结果的数组
 * @param numberArraySize 	需要解析多少个数值(不足则用0补充)
 * @param isFloatNumber		需要解析为整数还是浮点数:false=整数;true=浮点数
 *
 * @return 实际解析得到的数值数量(不包括补充的0)
*/
static NumberArrayTextParser(const text[], any:numberArray[], numberArraySize, bool:isFloatNumber)
{
	const PRECISION = 8;			// 定义浮点数最大精度,最多15
	static part[1 + 39 + 1 + PRECISION + 1];// 1位记录-,39位记录整数部分,1位记录小数点,PRECISION位记录小数部分,1位记录终止符
	
	new startPos = -1;			// 记录数字起点,-1表示尚未开始
	new endPos;				// 记录数字终点,或表示当前字符位置
	new bool:findSignChar;			// 是否已经找到负号
	new bool:findDotChar;			// 是否已经找到小数点
	new numberCount;			// 记录已转换数量
	
	// 循环条件:且转换数量未达标
	for (; numberCount < numberArraySize; endPos++)
	{
		// 若是负号
		if (text[endPos] == '-')
		{
			// 若已登记起点,或已经登记过负号,或负号下一个字不是数字,直接停止循环
			if (-1 < startPos || findSignChar || !isalnum(text[endPos + 1])) break;
			// 记住起点,负号
			startPos = endPos, findSignChar = true;
			continue;
		}
		
		// 若是数字
		if (isalnum(text[endPos]))
		{
			// 若尚未登记起点,将这个数字的索引作为起点
			if (startPos < 0) startPos = endPos;
			// 若已经登记起点,那么跳过这个数字
			continue;
		}
		
		// 若是小数点
		if (text[endPos] == '.')
		{
			// 若我们需要的是浮点数,需要一些额外解析...
			if (isFloatNumber)
			{
				// 若未登记起点,或已经登记过小数点,或小数点下一个字不是数字,直接停止循环
				if (startPos < 0 || findDotChar || !isalnum(text[endPos + 1])) break;
				// 记住小数点
				findDotChar = true;
				continue;
			}
			// 我们不需要浮点数,停止循环
			break;
		}
		
		// 若是空白字符或逗号
		if (isspace(text[endPos]) || text[endPos] == ',')
		{
			// 若尚未登记起点,跳过
			if (startPos < 0) continue;
			
			// 若已经登记起点,则当前位置是终点.可以进行转换
			copy(part, min(endPos - startPos, charsmax(part)), text[startPos]);
			if (isFloatNumber)	numberArray[numberCount++] = floatstr(part);
			else			numberArray[numberCount++] = str_to_num(part);
			// 重置findSignChar,startPos和findDotChar
			startPos = -1, findSignChar = findDotChar = false;
			continue;
		}
		
		// 若是终止符,或其它意义不明的字符,停止循环
		break;
	}
	// 若已经登记起点
	if (-1 < startPos)
	{
		// 若已经登记起点,则当前位置是终点.可以进行转换
		copy(part, min(endPos - startPos, charsmax(part)), text[startPos]);
		if (isFloatNumber)	numberArray[numberCount++] = floatstr(part);
		else			numberArray[numberCount++] = str_to_num(part);
	}
	
	// 若转换数量不足我们所需,用0填补后续空间
	while (numberCount < numberArraySize) numberArray[numberCount++] = 0;
	
	// 返回已转换数量
	return numberCount;
}