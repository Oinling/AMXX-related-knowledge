
#if (!defined(FLOAT_NEGATIVE_INFINITY))
/// 负无穷
const Float:FLOAT_NEGATIVE_INFINITY = Float:0b_11111111_10000000_00000000_00000000;
#endif

/**
 * 获取射线与圆形的交点.
 *
 * @param rayStart		射线的起点
 * @param rayDir		射线的方向(单位向量)
 * @param circleCenter		圆心坐标
 * @param circleNormal		圆的面向(单位向量,不影响射线从反面命中)
 * @param circleRadius		圆的半径
 * @param outIntersection	若返回值不是FLOAT_NEGATIVE_INFINITY,输出交点
 *
 * @return	若射线命中圆形,返回起点与交点的距离.否则返回FLOAT_NEGATIVE_INFINITY
 */
static Float:RayIntersectionCircle(const Float:rayStart[3], const Float:rayDir[3], const Float:circleCenter[3], const Float:circleNormal[3], Float:circleRadius, Float:outIntersection[3] = 0.0)
{
	new Float:cosA = xs_vec_dot(circleNormal, rayDir);
	
	// 射线方向与平面方向形成的夹角几乎等于90度,也就是射线与平面平行,视作无交点
	if (-0.000001 < cosA < 0.000001) return FLOAT_NEGATIVE_INFINITY;
	
	new Float:offsetFromRayStart[3];
	xs_vec_sub(circleCenter, rayStart, offsetFromRayStart);
	
	// 命中点在射线起点后方,视作无交点
	new Float:rayLength = xs_vec_dot(circleNormal, offsetFromRayStart) / cosA;
	if (rayLength < 0.0) return FLOAT_NEGATIVE_INFINITY;
	
	// 计算交点
	xs_vec_add_scaled(rayStart, rayDir, rayLength, outIntersection);
	return circleRadius < xs_vec_distance(circleCenter, outIntersection) ? FLOAT_NEGATIVE_INFINITY : rayLength;
}