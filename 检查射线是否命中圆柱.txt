enum sRay
{
	Float:	R_Origin[3],	// 射线起点
	Float:	R_Direction[3],	// 射线方向
	Float:	R_Length	// 射线长度
}
enum sCylinder
{
	Float:	C_BasePos[3],	// 圆柱起点
	Float:	C_Direction[3],	// 圆柱方向
	Float:	C_Radius,	// 圆柱两侧端盖半径
	Float:	C_Height	// 圆柱两侧端盖的距离(圆柱高度,长度,厚度)
}
enum sHitInfo
{
	Float:	HI_Distance,	// 射线与命中点距离
	Float:	HI_Point[3]	// 射线的命中点
}

... {	// 示例
	new cylinder[sCylinder] = { { 0.0, 0.0, 0.0 }, { 0.0, 0.0, 1.0 }, 16.0, 72.0 };
	new ray[sRay];
	pev(playerEntId, pev_origin, ray[R_Origin]);
	pev(playerEntId, pev_view_ofs, ray[R_Direction]);
	xs_vec_add(ray[R_Origin], ray[R_Direction], ray[R_Origin]);
	velocity_by_aim(playerEntId, 1, ray[R_Direction]);
	ray[R_Length] = 100.0;
	
	new hitInfo[sHitInfo];
	if (Raycast(ray, cylinder, hitInfo))
		client_print(playerEntId, print_chat, "[AMXX]距离:%f", hitInfo[HI_Distance]);
}

static bool:Raycast(const ray[sRay], const cylinder[sCylinder], hitInfo[sHitInfo])
{
	// 生成正交基
	new Float:kU[3], Float:kV[3], Float:kW[3];
	xs_vec_copy(cylinder[C_Direction], kW);
	
	// 计算正交向量kU
	if (floatabs(kW[0]) >= floatabs(kW[1]))
	{
		new Float:fInvLength = 1.0 / floatsqroot(kW[0] * kW[0] + kW[2] * kW[2]);
		kU[0] = -kW[2] * fInvLength;
		kU[1] = 0.0;
		kU[2] = kW[0] * fInvLength;
	}
	else
	{
		new Float:fInvLength = 1.0 / floatsqroot(kW[1] * kW[1] + kW[2] * kW[2]);
		kU[0] = 0.0;
		kU[1] = kW[2] * fInvLength;
		kU[2] = -kW[1] * fInvLength;
	}
	
	// 计算kV
	xs_vec_cross(kW, kU, kV);
	xs_vec_normalize(kV, kV);

	// 变换射线到局部坐标系
	new Float:kD[3];
	xs_vec_set(kD, xs_vec_dot(kU, ray[R_Direction]), xs_vec_dot(kV, ray[R_Direction]), xs_vec_dot(kW, ray[R_Direction]));
	
	new Float:fDLength = xs_vec_len(kD);
	if (fDLength < 1.0e-6) return false;
		
	new Float:fInvDLength = 1.0 / fDLength;
	xs_vec_normalize(kD, kD);

	// 计算射线起点在局部坐标系的偏移
	new Float:kDiff[3], Float:kP[3];
	xs_vec_sub(ray[R_Origin], cylinder[C_BasePos], kDiff);
	xs_vec_set(kP, xs_vec_dot(kU, kDiff), xs_vec_dot(kV, kDiff), xs_vec_dot(kW, kDiff));

	new Float:fRadiusSqr = cylinder[C_Radius] * cylinder[C_Radius];

	// 检查射线是否平行于圆柱轴向,若时,查找最近端盖
	if (floatabs(kD[2]) >= 1.0 - 1.0e-6)
	{
		new Float:fAxisDir = xs_vec_dot(ray[R_Direction], cylinder[C_Direction]);
		new Float:fDiscr = fRadiusSqr - (kP[0] * kP[0] + kP[1] * kP[1]);
		if (fDiscr < 0.0) return false;

		new Float:t = 0.0;
		if (fAxisDir < 0.0)
		{
			if (kP[2] < 0.0) return false;
			if (cylinder[C_Height] < kP[2]) t = (kP[2] - cylinder[C_Height]) * fInvDLength;
			else t = kP[2] * fInvDLength;
		}
		else
		{
			if (cylinder[C_Height] < kP[2]) return false;
			if (kP[2] < 0.0) t = -kP[2] * fInvDLength;
			else t = (cylinder[C_Height] - kP[2]) * fInvDLength;
		}
		if (ray[R_Length] < t) return false;
		
		xs_vec_add_scaled(ray[R_Origin], ray[R_Direction], t, hitInfo[HI_Point]);
		hitInfo[HI_Distance] = t;
		return true;
	}

	// 无限圆柱体相交检测
	new Float:fA = kD[0] * kD[0] + kD[1] * kD[1];
	new Float:fB = kP[0] * kD[0] + kP[1] * kD[1];
	new Float:fC = kP[0] * kP[0] + kP[1] * kP[1] - fRadiusSqr;
	new Float:delta = fB * fB - fA * fC;

	new Float:t_side = ray[R_Length] + 1.0;
	new bool:bSideIntersect = false;

	if (0.0 <= delta)
	{
		new Float:fRoot = floatsqroot(delta);
		new Float:fInv = 1.0 / fA;
		// 判断射线起点在圆柱内外,选择正确的根,计算交点
		new Float:distSqr = kP[0] * kP[0] + kP[1] * kP[1];
		new Float:fT = (distSqr < fRadiusSqr ? fRoot - fB : -fB - fRoot) * fInv;
		new Float:fZ = kP[2] + fT * kD[2];
		if (0.0 <= fZ && fZ <= cylinder[C_Height])
		{
			new Float:currentT = fT * fInvDLength;
			if (0.0 <= currentT && currentT <= ray[R_Length])
			{
				t_side = currentT;
				bSideIntersect = true;
			}
		}
	}

	// 处理顶部和底部端盖交点
	new Float:topCapCenter[3];
	xs_vec_add_scaled(cylinder[C_BasePos], cylinder[C_Direction], cylinder[C_Height], topCapCenter);
	new Float:axisDot = xs_vec_dot(ray[R_Direction], cylinder[C_Direction]);

	new Float:t_top = ray[R_Length] + 1.0;
	new bool:hitTop = false;

	if (1.0e-6 < floatabs(axisDot))
	{
		new Float:toTop[3];
		xs_vec_sub(topCapCenter, ray[R_Origin], toTop);
		new Float:tTop = xs_vec_dot(toTop, cylinder[C_Direction]) / axisDot;

		if (tTop > 0.0 && tTop <= ray[R_Length])
		{
			new Float:intersection[3];
			xs_vec_mul_scalar(ray[R_Direction], tTop, intersection);
			xs_vec_add(ray[R_Origin], intersection, intersection);

			new Float:toCenter[3];
			xs_vec_sub(intersection, topCapCenter, toCenter);
			new Float:distSqr = xs_vec_dot(toCenter, toCenter);
			if (distSqr <= fRadiusSqr)
			{
				t_top = tTop;
				hitTop = true;
			}
		}
	}

	new Float:t_bottom = ray[R_Length] + 1.0;
	new bool:hitBottom = false;

	if (1.0e-6 < floatabs(axisDot))
	{
		new Float:cylinderNegDir[3];
		xs_vec_neg(cylinder[C_Direction], cylinderNegDir);

		new Float:toBottom[3];
		xs_vec_sub(cylinder[C_BasePos], ray[R_Origin], toBottom);
		new Float:tBottom = xs_vec_dot(toBottom, cylinderNegDir) / xs_vec_dot(ray[R_Direction], cylinderNegDir);

		if (0.0 < tBottom && tBottom <= ray[R_Length])
		{
			new Float:intersection[3];
			xs_vec_mul_scalar(ray[R_Direction], tBottom, intersection);
			xs_vec_add(ray[R_Origin], intersection, intersection);

			new Float:toCenter[3];
			xs_vec_sub(intersection, cylinder[C_BasePos], toCenter);
			new Float:distSqr = xs_vec_dot(toCenter, toCenter);
			if (distSqr <= fRadiusSqr)
			{
				t_bottom = tBottom;
				hitBottom = true;
			}
		}
	}

	// 收集所有有效交点并选择最近的
	new Float:minT = ray[R_Length] + 1.0;
	new bool:found = false;

	if (bSideIntersect && t_side <= ray[R_Length])
	{
		minT = t_side;
		found = true;
	}
	if (hitTop && t_top <= ray[R_Length] && t_top < minT)
	{
		minT = t_top;
		found = true;
	}
	if (hitBottom && t_bottom <= ray[R_Length] && t_bottom < minT)
	{
		minT = t_bottom;
		found = true;
	}
	if (found)
	{
		hitInfo[HI_Distance] = minT;
		xs_vec_add_scaled(ray[R_Origin], ray[R_Direction], minT, hitInfo[HI_Point]);
		return true;
	}

	return false;
}

// --------------------------------------------------------
// 对于方向始终为[0 0 1]的圆柱,可大幅度简化计算过程
// --------------------------------------------------------

static bool:Raycast(const ray[sRay], const cylinder[sCylinder], hitInfo[sHitInfo])
{
	// 射线起点相对于圆柱基点的偏移
	new Float:o[3];
	xs_vec_sub(ray[R_Origin], cylinder[C_BasePos], o);

	new bool:found = false;
	new Float:minT = ray[R_Length] + 1.0;

	// ----------------------------
	// 检测圆柱侧面相交
	// ----------------------------
	new Float:a = ray[R_Direction][0] * ray[R_Direction][0] + ray[R_Direction][1] * ray[R_Direction][1];
	if (a > 1.0e-6) // 避免除零
	{
		new Float:b = o[0] * ray[R_Direction][0] + o[1] * ray[R_Direction][1];
		new Float:c = o[0] * o[0] + o[1] * o[1] - cylinder[C_Radius] * cylinder[C_Radius];
		new Float:delta = b * b - a * c;

		if (delta >= 0.0)
		{
			new Float:sqrtDelta = floatsqroot(delta);
			new Float:invA = 1.0 / a;
			new Float:t1 = (-b - sqrtDelta) * invA;
			new Float:t2 = (-b + sqrtDelta) * invA;

			// 检查两个可能的交点
			for (new i = 0; i < 2; i++)
			{
				new Float:t = (i == 0) ? t1 : t2;
				if (t >= 0.0 && t <= ray[R_Length])
				{
					new Float:z = o[2] + ray[R_Direction][2] * t;
					if (z >= 0.0 && z <= cylinder[C_Height] && t < minT)
					{
						minT = t;
						found = true;
					}
				}
			}
		}
	}

	// ----------------------------
	// 检测顶部端盖相交 (z = cylinder[C_BasePos][2] + cylinder[C_Height])
	// ----------------------------
	if (ray[R_Direction][2] != 0.0)
	{
		new Float:t_top = (cylinder[C_BasePos][2] + cylinder[C_Height] - ray[R_Origin][2]) / ray[R_Direction][2];
		if (t_top >= 0.0 && t_top <= ray[R_Length])
		{
			new Float:x = o[0] + ray[R_Direction][0] * t_top;
			new Float:y = o[1] + ray[R_Direction][1] * t_top;
			if (x * x + y * y <= cylinder[C_Radius] * cylinder[C_Radius] && t_top < minT)
			{
				minT = t_top;
				found = true;
			}
		}
	}

	// ----------------------------
	// 检测底部端盖相交 (z = cylinder[C_BasePos][2])
	// ----------------------------
	if (ray[R_Direction][2] != 0.0)
	{
		new Float:t_bottom = (cylinder[C_BasePos][2] - ray[R_Origin][2]) / ray[R_Direction][2];
		if (t_bottom >= 0.0 && t_bottom <= ray[R_Length])
		{
			new Float:x = o[0] + ray[R_Direction][0] * t_bottom;
			new Float:y = o[1] + ray[R_Direction][1] * t_bottom;
			if (x * x + y * y <= cylinder[C_Radius] * cylinder[C_Radius] && t_bottom < minT)
			{
				minT = t_bottom;
				found = true;
			}
		}
	}

	// ----------------------------
	// 最终结果处理
	// ----------------------------
	if (found && minT <= ray[R_Length])
	{
		xs_vec_add_scaled(ray[R_Origin], ray[R_Direction], hitInfo[HI_Distance] = minT, hitInfo[HI_Point]);
		return true;
	}
	return false;
}